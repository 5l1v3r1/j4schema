<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <info>
    <title>J4Schema User's Guide</title>

    <author>
      <personname>
        <firstname>Davide</firstname>

        <surname>Tampellini</surname>
      </personname>

      <affiliation>
        <orgname>FabbricaBinaria.it</orgname>
      </affiliation>
    </author>

    <pubdate>March 2012</pubdate>

    <revhistory>
      <revision>
        <revnumber>3.2.0</revnumber>

        <date>November 15th, 2012</date>

        <author>
          <personname>
            <firstname>Davide</firstname>

            <surname>Tampellini</surname>
          </personname>
        </author>
      </revision>

      <revision>
        <revnumber>3.1.1</revnumber>

        <date>July 10th, 2012</date>

        <author>
          <personname>
            <firstname>Davide</firstname>

            <surname>Tampellini</surname>
          </personname>
        </author>
      </revision>

      <revision>
        <revnumber>3.1.0</revnumber>

        <date>April 30th, 2012</date>

        <author>
          <personname>
            <firstname>Davide</firstname>

            <surname>Tampellini</surname>
          </personname>
        </author>
      </revision>

      <revision>
        <revnumber>2.5.4</revnumber>

        <date>March 13th, 2012</date>

        <author>
          <personname>
            <firstname>Davide</firstname>

            <surname>Tampellini</surname>
          </personname>
        </author>
      </revision>
    </revhistory>

    <legalnotice>
      <para>Permission is granted to copy, distribute and/or modify this
      document under the terms of the GNU Free Documentation License, Version
      1.3 or any later version published by the Free Software Foundation; with
      no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
      copy of the licence can be found on-line at <ulink
      url="http://www.gnu.org/licenses/fdl.html">http://www.gnu.org/licenses/fdl.html</ulink></para>
    </legalnotice>

    <abstract>
      <para>This book covers the use of the J4Schema package for
      <trademark>Joomla!</trademark> -powered web sites.</para>
    </abstract>
  </info>

  <chapter id="preface">
    <title>Preface</title>

    <para>In June 2011, three main search engines (Google, Bing and Yahoo)
    created a new standard for semantic search: schema.org. They created a
    dictionary in order to turn into machine readable some information that
    only a human being could understand.</para>

    <para>For example, the word "Avatar" could be a lot of things: it could be
    a film title, an user image on a forum and so on. We can understand what
    we're talking about using the context, a machine can't, it needs more
    information.</para>

    <para>To help developers in this task, we have created an extension that
    allows them to quickly navigate inside the dictionary and pick the tags
    they need.</para>
  </chapter>

  <chapter id="installation">
    <title>Installation</title>

    <para>Installation and requirements details for J4Schema extension</para>

    <section id="requirements">
      <title>Requirements</title>

      <para>J4Schema is tested on Joomla! 1.5.26, 2.5 and 3.x. Anyway, we
      strongly suggest you to always use the latest Joomla! version, since it
      patches all the known bugs.</para>

      <warning>
        <title>J4Schema and Joomla 1.5</title>

        <para>In order to use J4Schema under Joomla 1.5 you
        <emphasis>must</emphasis> install the latest available version (at
        this time is 1.5.26) and enable the <emphasis>Mootools upgrade system
        plugin</emphasis>.</para>

        <para>J4Schema needs Mootools 1.2+, without it you wouldn't be able to
        load attributes and types trees.</para>
      </warning>

      <para>System requirements are less restrictive than Joomla!, so, if you
      can run the CMS without problems, you shouldn't have any problems with
      this extension.</para>

      <para>J4Schema is integrated with <ulink
      url="http://www.joomlacontenteditor.net/">JCE editor</ulink>, so you
      need to install and use it as editor for your articles.</para>
    </section>

    <section id="download">
      <title>Download</title>

      <para>You can get the latest version of our extension from the
      "Download" section of our site. We have created a "one-click-installer"
      package, once installed you will find: <itemizedlist>
          <listitem>
            <simpara>FrameworkOnFramework library</simpara>
          </listitem>

          <listitem>
            <simpara>J4Schema component</simpara>
          </listitem>

          <listitem>
            <simpara>J4Schema JCE plugin</simpara>
          </listitem>
        </itemizedlist></para>

      <note>
        <para>You should always use the latest version, since we constantly
        work on fixing bugs and adding new features.</para>
      </note>
    </section>

    <section id="configuration">
      <title>Configuration</title>

      <note>
        <para>On package installation, everything should be ready to use.
        However, if you have any problems on JCE plugin, you should check
        these steps.</para>
      </note>

      <para>If you have deleted or you're not using the
      <emphasis>Default</emphasis> profile, you have to manually add the
      J4Schema button on JCE editor. To do that, you have to go in
      <emphasis>JCE Administration</emphasis> » <emphasis>Edit
      profile</emphasis> » <emphasis>Features tab</emphasis> and drag&amp;drop
      the Google button.</para>

      <para>As last step, you have to disable the "Cleanup HTML" features,
      since we're adding non-standard HTML tags, JCE sees them as errors and
      strips them out from your articles.</para>

      <para>You can disable it from <emphasis>JCE Administration</emphasis> »
      <emphasis>Editor Global Configuration</emphasis>.</para>

      <para>Excellent! You're ready to start!</para>
    </section>
  </chapter>

  <chapter id="usage">
    <title>Usage</title>

    <section id="a-real-example">
      <title>A real example</title>

      <para>We'll start with a real example. Below you can find a text that
      we'll format using schema.org attributes:</para>

      <example>
        <title>Plain HTML (no schema.org microdata)</title>

        <programlisting>
&lt;div&gt;
    &lt;h1&gt;Avatar&lt;/h1&gt;
    &lt;span&gt;Director: James Cameron (born August 16, 1954)&lt;/span&gt;
    &lt;span&gt;Science fiction&lt;/span&gt;
    &lt;a href="http://www.example.com/movies/avatar-theatrical-trailer.html"&gt;Trailer&lt;/a&gt;
&lt;/div&gt;
        </programlisting>
      </example>

      <para>Create a new article and paste it inside you editor. Now select
      all the text and press the <guibutton>J4Schema button</guibutton></para>

      <tip>
        <para>When selecting a text, the best thing to do is to click on the
        container element on the editor status bar. In this way you'll get the
        opening and closing tags, too. <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/selecting_text.jpg"
                           scalefit="1" userlevel="" width="16cm"/>
              </imageobject>
            </mediaobject>
          </screenshot></para>
      </tip>

      <para>A new window should open: that's the <guilabel>J4Schema</guilabel>
      core! Here you'll add and manage your microdata attributes. Let's try to
      figure out all the options that you have.</para>

      <section id="j4schema-interface">
        <title>The interface</title>

        <para>
          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/interface.jpg"
                           scalefit="1" userlevel="" width="18cm"/>
              </imageobject>
            </mediaobject>
          </screenshot>
        </para>

        <variablelist>
          <varlistentry>
            <term>1. Selection area</term>

            <listitem>
              <para>This area displays the text you have selected, every
              change you made to it (adding schema.org attributes, editing the
              text or the HTML and so on) will be pushed back into the
              editor.</para>

              <para>When adding a new itemtype or attribute, select the text
              you want to update; in this way chenges will only affect the
              selected one, not the entire text.</para>

              <para>However, the current "working" text is displayed in the
              <emphasis>Current selection</emphasis> area.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>2. Type tree</term>

            <listitem>
              <para>Here you can find all Schema.org types, organized into a
              tree. Every time you select a type, the attribute tree will
              reload itself and will show the avaible attributes.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>3. Type description</term>

            <listitem>
              <para>A short description of selected type.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>4. Attribute tree</term>

            <listitem>
              <para>This tree holds all the avaible attributes for the
              selected type and its parents.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>5. Attribute description</term>

            <listitem>
              <para>A short description of the selected attribute.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>6. Attribute possible values</term>

            <listitem>
              <para>When more than one value could be choosen, here you'll
              find a list of options, according of what you selected. Here it
              is a list of possible outputs: <itemizedlist>
                  <listitem>
                    <para><emphasis>No options</emphasis> The text you just
                    selected is the only possible value for this
                    attribute.</para>
                  </listitem>

                  <listitem>
                    <para><emphasis>The attribute could be another
                    itemtype</emphasis> The attribute you selected can be a
                    plain property or another itemtype block, you may want to
                    choose the last option, so you can add more of its
                    properties inside. <screenshot>
                        <mediaobject>
                          <imageobject>
                            <imagedata align="center"
                                       fileref="images/attribute_itemtype.jpg"
                                       scalefit="1" userlevel=""/>
                          </imageobject>
                        </mediaobject>
                      </screenshot></para>
                  </listitem>

                  <listitem>
                    <para><emphasis>Time/duration specification</emphasis> You
                    have to translate a date (i.e. "January, 1st 1970") or a
                    duration (i.e. "3 hours") into the ISO format; just
                    complete the two fields and you're ok,
                    <guilabel>J4Schema</guilabel> we'll do the rest.
                    <screenshot>
                        <mediaobject>
                          <imageobject>
                            <imagedata align="center"
                                       fileref="images/attribute_date_duration.jpg"
                                       scalefit="1" userlevel=""/>
                          </imageobject>
                        </mediaobject>
                      </screenshot></para>
                  </listitem>

                  <listitem>
                    <para><emphasis>Multiple itemtypes</emphasis> Selected
                    text can refer to more itemtypes, you have to choose one
                    and if you want to create a new itemtype block or just a
                    property. <screenshot>
                        <mediaobject>
                          <imageobject>
                            <imagedata align="center"
                                       fileref="images/attribute_multiple_itemtypes.jpg"
                                       scalefit="1" userlevel=""/>
                          </imageobject>
                        </mediaobject>
                      </screenshot></para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>7. Type/Attribute configuration</term>

            <listitem>
              <para>When selecting an attribute, you can choose to add it to
              the current element, or wrap it with a <code>&lt;div&gt;</code>
              or <code>&lt;span&gt;</code> element.</para>

              <note>
                <para>If you choose to add the type/attribute to the current
                element and there are no elements on the "working" selection,
                <guilabel>J4Schema</guilabel> will wrap the text with a new
                <code>&lt;span&gt;</code> element.</para>
              </note>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>8. Current Selection</term>

            <listitem>
              <para>This box shows the current selection (a.k.a. the
              <emphasis>Working selection</emphasis>); when you add
              types/attributes, every change will affect only the text that is
              in this section.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>

    <section id="adding-microdata">
      <title>Adding microdata</title>

      <para>Now that you know every part of <guilabel>J4Schema</guilabel>
      editor, let's start adding Schema.org information.</para>

      <para>First of all, we have to add the <code>itemtype</code> property,
      so we can identify the subject of this block of text.</para>

      <section id="adding-itemtype">
        <title>Adding the itemtype</title>

        <para>Just select the entire text, explode the type tree until the
        Movie one and click on <guibutton>Add type button.</guibutton></para>

        <para>Great! You have just added a type to your text!</para>

        <note>
          <para>You can find the Movie type under <emphasis>Thing</emphasis> »
          <emphasis>Creative Work</emphasis> »
          <emphasis>Movie</emphasis></para>
        </note>

        <para>Now your text should be something like this:</para>

        <example>
          <title>HTML after type add</title>

          <programlisting>
&lt;div itemscope="" itemtype="http://schema.org/Movie"&gt;
    &lt;h1&gt;Avatar&lt;/h1&gt;
    &lt;span&gt;Director: James Cameron (born August 16, 1954)&lt;/span&gt;
    &lt;span&gt;Science fiction&lt;/span&gt;
    &lt;a href="http://www.example.com/movies/avatar-theatrical-trailer.html"&gt;Trailer&lt;/a&gt;
&lt;/div&gt;
          </programlisting>
        </example>

        <note>
          <para>As you can see, the <code>itemscope</code> property has empty
          attributes; don't worry! J4Schema cleanup plugin will remove these
          quotes for you.</para>
        </note>
      </section>

      <section id="adding-attributes">
        <title>Adding attributes</title>

        <para>Now you have access to "Movie" and its parents properties;
        select <code>&lt;h1&gt;Avatar&lt;/h1&gt;</code> and explode the node
        <emphasis>Thing</emphasis> on the <emphasis>Attribute
        node</emphasis>.</para>

        <para>Select the attribute <emphasis>name</emphasis> and press the
        <guibutton>Add attribute button</guibutton>. If you have done every
        right, your text should look like this:</para>

        <example>
          <title>HTML after adding "name" attribute</title>

          <programlisting>
&lt;div itemscope="" itemtype="http://schema.org/Movie"&gt;
    &lt;h1 itemprop="name"&gt;Avatar&lt;/h1&gt;
    &lt;span&gt;Director: James Cameron (born August 16, 1954)&lt;/span&gt;
    &lt;span&gt;Science fiction&lt;/span&gt;
    &lt;a href="http://www.example.com/movies/avatar-theatrical-trailer.html"&gt;Trailer&lt;/a&gt;
&lt;/div&gt;
          </programlisting>
        </example>

        <para>In the same way, we can add more information about the movie
        genre: select the text <code>&lt;span&gt;Science
        fiction&lt;/span&gt;</code> and look for the
        <emphasis>Genre</emphasis> attribute.</para>

        <para>You'll find it in the <emphasis>CreativeWork</emphasis> node,
        since every type shares its attributes with its parent; now add it as
        we did before.</para>

        <para>Now select the trailer link (<code>&lt;a
        href="http://www.example.com/movies/avatar-theatrical-trailer.html"&gt;Trailer&lt;/a&gt;</code>)
        and select the <emphasis>Trailer</emphasis> attribute.</para>

        <para>As you can see in the box on the right, <guilabel>List of
        possible Values</guilabel>, you can choose to add it as plain property
        or to create another <code>itemtype</code> block. For the moment, just
        add it as property.</para>

        <para>Your text should be like this:</para>

        <example>
          <title>HTML after adding attributes</title>

          <programlisting>
&lt;div itemscope="" itemtype="http://schema.org/Movie"&gt;
    &lt;h1 itemprop="name"&gt;Avatar&lt;/h1&gt;
    &lt;span&gt;Director: James Cameron (born August 16, 1954)&lt;/span&gt;
    &lt;span itemprop="genre"&gt;Science fiction&lt;/span&gt;
    &lt;a itemprop="trailer" href="http://www.example.com/movies/avatar-theatrical-trailer.html"&gt;
        Trailer
    &lt;/a&gt;
&lt;/div&gt;
          </programlisting>
        </example>
      </section>
    </section>

    <section id="add-microdata-congrats">
      <title>Congratulations!</title>

      <para>You've just styled your first text with Schema.org!</para>

      <para>Now search engines bot can understand what we're talking about,
      and that's great!</para>

      <para>But, what if we want to add <emphasis>more</emphasis> information
      on the page? We left out the part regarding the director and we can
      define a little more the trailer element.</para>

      <para>Well, it's time to move on the <emphasis>Advance
      usage</emphasis>.</para>
    </section>
  </chapter>

  <chapter id="advanced-usage">
    <title>Advanced Usage</title>

    <section id="adding-embedded-items">
      <title>Adding embedded items</title>

      <para>Some properties are items itself, so we can choose to add them as
      plain properties or to create a new itemtype block.</para>

      <para>What's the difference? When you add a new block, you have access
      to all of its (and its parent) properties, so you can add much more
      information rather than adding a simple attribute.</para>

      <para>Let's continue with the previous example, your final text should
      be this:</para>

      <programlisting>
&lt;div itemscope="" itemtype="http://schema.org/Movie"&gt;
    &lt;h1 itemprop="name"&gt;Avatar&lt;/h1&gt;
    &lt;span&gt;Director: James Cameron (born August 16, 1954)&lt;/span&gt;
    &lt;span itemprop="genre"&gt;Science fiction&lt;/span&gt;
    &lt;a itemprop="trailer" href="http://www.example.com/movies/avatar-theatrical-trailer.html"&gt;
        Trailer
    &lt;/a&gt;
&lt;/div&gt;
      </programlisting>

      <para>The director section has a lot of unstyled information: name,
      surname and date of birth, so let's turn them into a machine-readeable
      format. But first of all we need to do a little change: convert the
      <code>&lt;span&gt;</code> element into a
      <code>&lt;div&gt;</code>.</para>

      <example>
        <title>Prepare your "Director" block</title>

        <programlisting>
&lt;div itemscope="" itemtype="http://schema.org/Movie"&gt;
    &lt;h1 itemprop="name"&gt;Avatar&lt;/h1&gt;
    &lt;div&gt;Director: James Cameron (born August 16, 1954)&lt;/div&gt;
    &lt;span itemprop="genre"&gt;Science fiction&lt;/span&gt;
    &lt;a itemprop="trailer" href="http://www.example.com/movies/avatar-theatrical-trailer.html"&gt;
        Trailer
    &lt;/a&gt;
&lt;/div&gt;
        </programlisting>
      </example>

      <para>Now select <code>&lt;div&gt;Director: James Cameron (born August
      16, 1954)&lt;/div&gt;</code> and select the
      <emphasis>director</emphasis> attribute. You can choose to add it as
      property or to create a new itemtype block: select the latter one and
      apply it to the current element.</para>

      <para>Great! Now you're ready to style everything inside the director
      property!</para>

      <example>
        <title>Creating an embedded itemtype</title>

        <programlisting>
&lt;div itemscope="" itemtype="http://schema.org/Movie"&gt;
    &lt;h1 itemprop="name"&gt;Avatar&lt;/h1&gt;
    &lt;div itemprop="director" itemscope="" itemtype="http://schema.org/Person"&gt;
        Director: James Cameron (born August 16, 1954)
    &lt;/div&gt;
    &lt;span itemprop="genre"&gt;Science fiction&lt;/span&gt;
    &lt;a itemprop="trailer" href="http://www.example.com/movies/avatar-theatrical-trailer.html"&gt;
        Trailer
    &lt;/a&gt;
&lt;/div&gt;
        </programlisting>
      </example>

      <para>Select <code>James Cameron</code> and add the
      <emphasis>name</emphasis> property (you can find it under the Type
      node). Remember to wrap the text with a new <code>span</code>
      element.</para>

      <para>After that select <code>August 16, 1954</code>. As you can see,
      it's James Cameron birthdate, let's style it.</para>

      <para>Select the <emphasis>birthDate</emphasis> property: things are
      quite different, this time. Infact we have to convert this text into a
      standard time format, so let's input <code>1954-08-16</code> in the
      <guilabel>List of possible Values</guilabel>, leaving the hour/minutes
      field blank.</para>

      <note>
        <para>You have to input the time using this format: YYYY-MM-DD</para>
      </note>

      <tip>
        <para>There is a small datepicker next to the field, you can use it
        instead of typing the date manually.</para>
      </tip>
    </section>

    <section id="advanced-usage-congrats">
      <title>Congratulations! (again)</title>

      <para>Congratulations! You have styled your text block using Schema.org
      dictionary.</para>

      <para>You have converted a lot of information into a machine-readable
      format: <itemizedlist>
          <listitem>
            <simpara>First of all, you specified that we're talking about a
            movie</simpara>
          </listitem>

          <listitem>
            <simpara>Its name is <emphasis>Avatar</emphasis> and it's a
            <emphasis>Science fiction</emphasis> film</simpara>
          </listitem>

          <listitem>
            <simpara>You added the position of its <emphasis>trailer
            video</emphasis></simpara>
          </listitem>

          <listitem>
            <simpara><emphasis>James Cameron</emphasis> (born in
            <emphasis>August 16th, 1954</emphasis>) is its director</simpara>
          </listitem>
        </itemizedlist></para>

      <para>As you can see, even a small text like this could be enriched with
      a lot more details. Even if we consider them obious, we just defined the
      context of the article without any doubt, and search engines bot will
      thank us.</para>

      <example>
        <title>Final HTML with microdata</title>

        <programlisting>
&lt;div itemscope="" itemtype="http://schema.org/Movie"&gt;
    &lt;h1 itemprop="name"&gt;Avatar&lt;/h1&gt;
    &lt;div itemprop="director" itemscope="" itemtype="http://schema.org/Person"&gt;
        Director: James Cameron
        (born &lt;time itemprop="birthDate" datetime="1954-08-16"&gt;August 16, 1954&lt;/time&gt;)
    &lt;/div&gt;
    &lt;span itemprop="genre"&gt;Science fiction&lt;/span&gt;
    &lt;a itemprop="trailer" href="http://www.example.com/movies/avatar-theatrical-trailer.html"&gt;
        Trailer
    &lt;/a&gt;
&lt;/div&gt;
        </programlisting>
      </example>

      <para>As last thing, why don't you try to convert the trailer link into
      a new itemtype block and style it?</para>

      <para>Good work!</para>
    </section>
  </chapter>

  <chapter id="pro-version">
    <title>Professional Version</title>

    <para>Inside <emphasis>J4Schema Professional</emphasis> package you'll
    find new features and some useful function that will help you on choosing
    and selecting the Schema.org elements. <itemizedlist>
        <listitem>
          <simpara><emphasis>Token management</emphasis> Automatically replace
          your own tokens with Schema.org attributes</simpara>
        </listitem>

        <listitem>
          <para><emphasis>Template overrides for standard tokens</emphasis> We
          provided template overrides for these components with standard
          Schema.org attributes: <itemizedlist>
              <listitem>
                <para>Joomla! standard content (com_content). Please note that
                only Joomla 2.5 template overrides are available, since Joomla
                3.x has native support microdata inside the articles.</para>
              </listitem>

              <listitem>
                <para>Virtuemart product page</para>
              </listitem>

              <listitem>
                <para>K2 component</para>
              </listitem>
            </itemizedlist> However you can apply the same logic to every part
          of your site!</para>
        </listitem>

        <listitem>
          <simpara><emphasis>Auto-expansion of tree type</emphasis> On editor
          view, if the attribute you have chosen could be an
          <code>itemtype</code>, there will be a shortcut to automatically
          expand the type tree to that element</simpara>
        </listitem>
      </itemizedlist></para>

    <section id="how-to-use-pro">
      <title>How to download/install</title>

      <para>Professional versions are available to users with an active
      membership. Once you purchased it, you will find the professional
      packages inside every version; you can install it as a regular Joomla!
      package.</para>

      <note>
        <title>Updates for Pro versions</title>

        <para>To enable automatically updates you must enter your
        <guilabel>Download ID</guilabel> inside the Download ID field that you
        can find in the Option page of the component.</para>

        <para>After login, you can find the <guilabel>Download ID</guilabel>
        on our site under <emphasis>Account -&gt; My Subscriptions</emphasis>
        menu.</para>
      </note>
    </section>

    <section id="token-management">
      <title>Token management</title>

      <para>As usually let's start with an example. Let's say you have styled
      your article with the attributes you wanted. Everything is perfect, but
      you want to style other parts of your site, too.</para>

      <para>What if you want to add information on your blog layout, saying
      that every article is a independent element, with its category, its
      creation time and so? Using the JCE editor plugin you can't, since your
      scope is limited to the article; you need another tool.</para>

      <section id="token-logic">
        <title>The logic</title>

        <para>To simplify things, we have introduced a search&amp;replace
        token system. What does it mean?</para>

        <para>Well, it's quite simple: you create a token and assign him a
        value (it could whatever you want), then you add these tokens to your
        site: you can add them inside your articles, inside your template, on
        your template overrides... <emphasis>wherever</emphasis> you
        want.</para>

        <para>Next, our system plugin will replace the token string with the
        value you just typed.</para>

        <para>For example, you can create a token named
        <code>ARTICLE_WRAPPER</code> and replace it with</para>

        <para>
          <code>itemscope itemtype="http://schema.org/WebPage"</code>
        </para>

        <para>Your starting text is something like that: <programlisting>

          &lt;div { ARTICLE_WRAPPER } class="item-page&lt;?php echo $this-&gt;pageclass_sfx?&gt;"&gt;
          ...
          ...
          &lt;/div&gt;
        </programlisting> But the final output (read from search engine) would
        be: <programlisting>

            &lt;div itemscope itemtype="http://schema.org/WebPage"
            class="item-page&lt;?php echo $this-&gt;pageclass_sfx?&gt;"&gt;
            ...
            ...
            &lt;/div&gt;
          </programlisting></para>

        <para>This example is taken from the <emphasis>default</emphasis>
        layout of <emphasis>Article</emphasis> view of the
        <emphasis>com_content</emphasis> component and it's inside the
        installation package.</para>

        <para>Let's see how to add and manage more token.</para>
      </section>

      <section id="install-template-overrides">
        <title>Install template overrides</title>

        <note>
          <title>What's a template override?</title>

          <para>If you don't know what's a template override, you really
          should read this guide: <ulink
          url="http://docs.joomla.org/How_to_override_the_output_from_the_Joomla!_core">Joomla!
          template override system</ulink>, since we're going to use them a
          lot!</para>
        </note>

        <para>First of all, you should setup template overrides. Surf to the
        <guibutton>Template overrides</guibutton> submenu and you will find
        two tables.</para>

        <para>The table on the left, shows the ready-to-use overrides that
        come with <guilabel>J4Schema</guilabel>, on the right you can find the
        overrides that already exist.</para>

        <para>When you click on <guibutton>Copy overrides</guibutton> toolbar
        button, J4Schema overrides will be copied inside your current template
        override folder; if the files are already present, they will be backed
        up.</para>

        <para>Our overrides won't change the presentation of your articles,
        the are just <emphasis>com_content</emphasis> layouts with inside our
        tokens, ready to use. However, if you already have your overrides (and
        you want to keep them), you have to manually merge ours with yours.
        You can find our file inside this folder:</para>

        <para>
          <code>site_root/administrator/components/com_j4schema/overrides</code>
        </para>

        <note>
          <title>YOOtheme Warp users</title>

          <para>Latest YOOtheme template are based on Warp framework, which
          overrides by default every section of your Joomla! site.</para>

          <para>This means that you <emphasis>MUST NOT</emphasis> install the
          templates overrides automatically, but you have to manually copy
          them inside this folder:</para>

          <para>
            <code>site_root/templates/&lt;your_template&gt;/warp/systems/joomla/layouts</code>
          </para>
        </note>
      </section>

      <section id="token-list">
        <title>Token list</title>

        <para>In <guilabel>J4Schema</guilabel> component, surf to the
        <guibutton>Tokens</guibutton> menu, you will find the default tokens
        inside the installation package.</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/token_list.jpg"
                         scalefit="1"/>
            </imageobject>
          </mediaobject>
        </screenshot>

        <variablelist>
          <varlistentry>
            <term>ID</term>

            <listitem>
              <para>It's the token ID</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Token Name</term>

            <listitem>
              <para>It's the token name. This string (wrapped with <code>{
              }</code>) will be replaced with the string inside the column
              <emphasis>Token replace</emphasis></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Integration</term>

            <listitem>
              <para>It's the type of integration, at the moment there is only
              Joomla</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Token type</term>

            <listitem>
              <para>It's the type of the token. Available types are
              <emphasis>text</emphasis> or <emphasis>date</emphasis></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Token replace</term>

            <listitem>
              <para>It's the text that will replace the <emphasis>Token
              name</emphasis></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Published</term>

            <listitem>
              <para>Is this token published?</para>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>Here you can perform all the standard actions: publish,
        unpublish, add, delete and modify.</para>
      </section>

      <section id="create-a-token">
        <title>Create a token</title>

        <para>When you try to add or modify a token, you'll find this
        view:</para>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/token_add.gif"
                         scalefit="1"/>
            </imageobject>
          </mediaobject>
        </screenshot>

        <para>
          <variablelist>
            <varlistentry>
              <term>Token name</term>

              <listitem>
                <para>It's the text that will be replaced, ie
                <emphasis>MY_TOKEN</emphasis>. <note>
                    <para>Please entry it on uppercase, alphabetics only,
                    without any spaces or digits. Avoid colons
                    (<code>:</code>), since it's reserved char, used to parse
                    data from tokens (you'll learn more when we'll add a
                    <emphasis>date</emphasis> token).</para>
                  </note></para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Integration</term>

              <listitem>
                <para>It's the "domain" of integration; at the moment there is
                Joomla! and Virtuemart; in the future more will come (K2,
                JEvents and so on).</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Token type</term>

              <listitem>
                <para>It's the type of the token, it could be: <itemizedlist>
                    <listitem>
                      <para>Date</para>
                    </listitem>

                    <listitem>
                      <para>Google+</para>
                    </listitem>

                    <listitem>
                      <para>Link</para>
                    </listitem>

                    <listitem>
                      <para>Meta</para>
                    </listitem>

                    <listitem>
                      <para>Plain text</para>
                    </listitem>
                  </itemizedlist> They are almost the same, but you have to
                "style" it in template overrides in a different way.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Published</term>

              <listitem>
                <para>To publish/unpublish a token</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Token replace</term>

              <listitem>
                <para>This is the most important field, since it holds
                Schema.org attributes. If you know what to add, you can add
                them manually; in the other case you can explore the
                type/attributes tree and then click on <guibutton>Add
                type</guibutton> or <guibutton>Add attribute</guibutton>
                button.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>

        <note>
          <para>Please note that J4Schema can't verify if the data you added
          is correct, since you could add nested tokens. To ensure that
          everything is ok, you can use this <guilabel>Google</guilabel> tool:
          <ulink
          url="http://www.google.com/webmasters/tools/richsnippets">Rich
          Snippets Testing Tool</ulink></para>

          <para>However in our pro-version you can find a module named
          <emphasis>J4Schema Rich Tools tester</emphasis>. It will submit the
          current url to the Google tool, you only have to publish it wherever
          you want and follow the link.</para>
        </note>

        <para>Now you know everything you need to start adding tokens, let's
        start with an example.</para>

        <section id="add-tokens">
          <title>Add tokens</title>

          <para>Ok, let's say we want to add some information to the article
          we have just created in the previous examples (the one about the
          "Avatar" film, do you remember?).</para>

          <para>Here you can find the sections of the article view that we can
          style: <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata align="center" fileref="images/token_article.gif"
                             scalefit="1"/>
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <para>
            <orderedlist>
              <listitem>
                <para>Article title</para>
              </listitem>

              <listitem>
                <para>Category</para>
              </listitem>

              <listitem>
                <para>Publish date (or any other date such as Creation date or
                Modified date)</para>
              </listitem>

              <listitem>
                <para>Related links</para>
              </listitem>
            </orderedlist>
          </para>

          <para>So this is a snippet of a template override for the article
          (some parts were removed): <note>
              <para>In these examples there is a space between the token name
              and <code>{</code> or <code>}</code>. We had to do so to prevent
              Joomla to parse them as plugin in these articles; inside
              template overrides you have to remove that space.</para>
            </note></para>

          <example>
            <title>Article Tokens</title>

            <programlisting>
              &lt;div { ARTICLE_WRAPPER } class="item-page&lt;?php echo $this-&gt;pageclass_sfx?&gt;"&gt;
              [...]
              &lt;div { ARTICLE_BODY }&gt;
              [...]
              &lt;?php if ($params-&gt;get('show_title')) : ?&gt;
              &lt;h2 { ARTICLE_TITLE }&gt;
              &lt;?php if ($params-&gt;get('link_titles') &amp;&amp; !empty($this-&gt;item-&gt;readmore_link)) : ?&gt;
              &lt;a { ARTICLE_LINK } href ="&lt;?php echo $this-&gt;item-&gt;readmore_link; ?&gt;"&gt;
              &lt;?php echo $this-&gt;escape($this-&gt;item-&gt;title); ?&gt;&lt;/a&gt;
              &lt;?php else : ?&gt;
              &lt;?php echo $this-&gt;escape($this-&gt;item-&gt;title); ?&gt;
              &lt;?php endif; ?&gt;
              &lt;/h2&gt;
              &lt;?php endif; ?&gt;

              [...]

              &lt;?php if ($params-&gt;get('show_category')) : ?&gt;
              &lt;dd class="category-name" { ARTICLE_CATEGORY }&gt;
              [...]
              &lt;/dd&gt;
              &lt;?php endif; ?&gt;
              [...]
              &lt;/div&gt;
              &lt;/div&gt;

            </programlisting>
          </example>

          <para>If you use our tokens, too, this is the HTML output: <example>
              <title>Article HTML after token replace</title>

              <programlisting>
              &lt;div class="item-page" itemtype="http://schema.org/WebPage" itemscope&gt;
              [...]
              &lt;div itemprop="mainContentOfPage"&gt;
              [...]
              &lt;h2 itemprop="name"&gt;
              &lt;a href ="" itemprop="url"&gt;J4Schema&lt;/a&gt;
              &lt;/h2&gt;
              [...]
              &lt;dd itemprop="genre" class="category-name"&gt;
              Category: &lt;a href ="test-blog"&gt;Blog&lt;/a&gt;
              &lt;/dd&gt;
              [...]
              &lt;/div&gt;
              &lt;/div&gt;

            </programlisting>
            </example></para>

          <para>This is only a simple example, but, as you can see, once you
          set up everything, it works automatically! Even in the worst case
          (token not replaced) your page style won't be affected, since your
          browser will ignore the tokens!</para>

          <tip>
            <title>Can I add a token wherever I want?</title>

            <para>The short answer is: <emphasis>Yes, you
            can!</emphasis>.</para>

            <para>Here it is the longer and more techincal one. J4Schema uses
            a system plugin, loaded in the <code>onAfterRender</code> event.
            This event is fired just before sending the output, so we can
            manipulate the text however we want!</para>
          </tip>

          <para>Now let's see a particular token: the <emphasis>date
          token</emphasis></para>
        </section>

        <section id="add-a-date-token">
          <title>Add a date token</title>

          <para>As we already said, the date token is different from the text
          one.</para>

          <para>Take a look at the <code>ARTICLE_PUBLISH_UP</code> token in
          the token list: it's like a regular one, but its type is
          <emphasis>date</emphasis>.</para>

          <para>So far so good, ok? Now move to the template override and
          search for it. As you can see it's quite different from the other
          ones.</para>

          <example>
            <title>Date Token</title>

            <programlisting>
              &lt;time { ARTICLE_PUBLISH_UP:&lt;?php echo $this-&gt;item-&gt;publish_up?&gt; }&gt;
              &lt;?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON',
              JHtml::_('date', $this-&gt;item-&gt;publish_up, JText::_('DATE_FORMAT_LC2'))); ?&gt;
              &lt;/time&gt;</programlisting>
          </example>

          <para>As you can see, we have to wrap the text we want to style with
          a <guibutton>time</guibutton> tag, then add the token to it.</para>

          <para>The token syntax is quite different, since we have to pass to
          the plugin the date in order to transform it into the ISO format. To
          do that we have to add a colon (<code>:</code>) after the token
          name, then output the date value.</para>
        </section>

        <section id="add-an-author-token">
          <title>Add an author token</title>

          <para>With this token type, you can add author information on your
          page. In this way, author profile photo will show up in search
          results:</para>

          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/author_snippet.gif"/>
              </imageobject>

              <caption>Image taken from Google's Rich Testing Tools</caption>
            </mediaobject>
          </para>

          <para>First of all, you have to configure your Google+ profile; then
          edit the <emphasis>Contributor To</emphasis> section. In the dialog
          that appears, click <emphasis>Add custom link</emphasis> and enter
          the website URL, then click <emphasis>Save</emphasis>.</para>

          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/google_plus.gif"/>
              </imageobject>
            </mediaobject>
          </para>

          <note>
            <para>As you can imagine, you can test author tokens on live sites
            only; you can't do it on localhost, since Google can't reach
            it!</para>
          </note>

          <para>Then surf on the <guilabel>Authors</guilabel> view and click
          on <guibutton>Synch Authors</guibutton>. In this way you'll import
          existant users inside J4Schema.</para>

          <para>Don't worry, only new users will be imported, so you can run
          this operation every time you want. However, if you want, you can
          manually add a single user, clicking on the
          <guibutton>New</guibutton> button.</para>

          <para>For each author, you have to insert his google profile
          id:</para>

          <para>Well, you're done! If you test your page, you should see a
          nice image of your profile next to the search result!</para>

          <section id="add-author-manually">
            <title>Add an author token manually</title>

            <para>If you want to add the author token in an already existant
            template override (or in another part of your site), you have to
            follow these steps.</para>

            <para>First of all, you have to create a
            <guilabel>Google+</guilabel> token, and assign it a name.</para>

            <para>
              <mediaobject>
                <imageobject>
                  <imagedata align="center"
                             fileref="images/google_plus_token.gif"/>
                </imageobject>
              </mediaobject>
            </para>

            <para>Then, in your template override, you have to place your
            token in this way: <example>
                <title>Google+ Token</title>

                <programlisting>
                  &lt;a href ="{ GOOGLE_PLUS_AUTHOR:&lt;?php echo $this-&gt;item-&gt;created_by?&gt; }"&gt;
                  &lt;?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?&gt;
                  &lt;/a&gt;
                </programlisting>
              </example></para>

            <para>As you can see, the token is made by two part: the token
            name and the userid of the author, joined together by a semicolon
            ( <code>:</code> ). In this way <guilabel>J4Schema</guilabel> can
            check if there is a linked Google+ profile and create a correct
            link.</para>
          </section>
        </section>

        <section id="add-a-meta-token">
          <title>Add a meta token</title>

          <para>Sometimes you have to add some information that aren't visible
          on the page, for example the number of reviews, the best rating vote
          and so on.</para>

          <para>In these case, the best way to deal with that is to create a
          <guilabel>Meta</guilabel> token: the token will be invisible to the
          user, but it's present inside the page HTML code, providing
          information to the search engine.</para>

          <para>You can view these tokens inside Virtuemart template
          overrides.</para>

          <para>In this example we'll add a meta token for the total number of
          reviews. First of all create a new Meta token and assign it a name
          and a Schema.org property:</para>

          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/meta_token.gif"/>
              </imageobject>
            </mediaobject>
          </para>

          <para>Then, in your template override, you have to add the following
          code (snippet taken from <code>default_reviews.php</code>): <example>
              <title>Meta Token</title>

              <programlisting>
                &lt;span title="'.(JText::_("COM_VIRTUEMART_RATING_TITLE") . $num . '/' . $maxrating).'"&gt;
                { VM_META_REVIEW_RATING:'.$num.' }
                { VM_META_REVIEW_BEST_RATING:'.$maxrating.' }
                &lt;span class="stars-orange" style="width:'. (24 * $num).'px"&gt;
                &lt;/span&gt;
                &lt;/span&gt;';
              </programlisting>
            </example></para>

          <para>Even in this case, the token is made by two parts: the token
          name and the value that will be used, joined together by a semicolon
          ( <code>:</code> ).</para>
        </section>

        <section id="add-a-link-token">
          <title>Add a link token</title>

          <para>Link tokens are very similar to text ones, except that they
          have a fixed value and they're invisible to the user. Usually
          they're used for enumeration, for example in item
          availability.</para>

          <para>As usually, create a token and assign it a name and some
          Schema.org properties:</para>

          <para>
            <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/link_token.gif"/>
              </imageobject>
            </mediaobject>
          </para>

          <para>Then in your template overrides place the token wherever you
          want: <example>
              <title>Link Token</title>

              <programlisting>
                echo '{ VM_PRODUCT_IN_STOCK }'
              </programlisting>
            </example></para>
        </section>
      </section>
    </section>

    <section id="pro-congratulations">
      <title>Congratulations!</title>

      <para>Congratulations! Now you should know everything you need to start
      adding Schema.org attributes to your site.</para>

      <para>So what's next?</para>

      <para>We suggest you to take a look and become familiar with Schema.org
      syntax and its use; we gave you the tools but you have to add your own
      knownledge :)</para>

      <para>Here you can find a list of usefull links: <itemizedlist>
          <listitem>
            <simpara>
              <ulink url="http://schema.org">Schema.org homepage</ulink>
            </simpara>
          </listitem>

          <listitem>
            <simpara>
              <ulink url="http://schema.org/docs/gs.html">Schema.org
              tutorial</ulink>
            </simpara>
          </listitem>

          <listitem>
            <simpara>
              <ulink url="http://schema.org/docs/full.html">Schema.org full
              reference</ulink>
            </simpara>
          </listitem>
        </itemizedlist></para>
    </section>
  </chapter>

  <chapter id="j4schema-troubleshooting">
    <title>Troubleshooting</title>

    <section id="attributes-and-types-not-displayed">
      <title>Types and Attributes aren't displayed</title>

      <para>Sometimes, on some installation, attributes and types trees are
      not loaded.</para>

      <orderedlist>
        <listitem>
          <para>If you're under Joomla! 1.5, check if you have installed the
          latest available version, and if the system plugin
          <emphasis>Mootools upgrade</emphasis> is activated.</para>
        </listitem>

        <listitem>
          <para>J4Schema requires a quite number of javascript files to
          correctly display those two trees. If it's the first time you're
          using this extension, maybe your browser didn't complete the
          download from your server.</para>

          <para>To fix that, simply reload the page. Please note that JCE
          editor loads the plugin using an IFRAME, so you have to
          <emphasis>right click on the screen</emphasis> » <emphasis>this
          frame</emphasis> » <emphasis>reload this frame</emphasis></para>
        </listitem>

        <listitem>
          <para>If you still can't load the trees, probably there is another
          plugin conflicting with J4Schema. Sadly some plugin "hack" global
          Javascript object and this causes a lot of problems.</para>

          <para>You should disable all the plugins and try to enable them one
          by one: in this way you can understand who's conflicting with
          J4Schema.</para>
        </listitem>
      </orderedlist>
    </section>
  </chapter>
</book>
